// This work is licensed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/
// Â© LuxAlgo

//@version=5
indicator("Master Pattern [LuxAlgo]", "LuxAlgo - Master Pattern Indicator", overlay = true, max_boxes_count = 500, max_lines_count = 500)
//------------------------------------------------------------------------------
//Settings
//-----------------------------------------------------------------------------{
length = input.int(3, 'Contraction Detection Lookback', minval = 1)
liqLength = input.int(20, 'Liquidity Levels', minval = 1)

showMajor = input(true, 'Show Major Pattern')
showMinor = input(true, 'Show Minor Pattern')

//Style
patternCss = input.color(color.gray, 'Pattern Color', group = 'Pattern Style')
showBox = input(true, 'Show Box Area', group = 'Pattern Style')
showAvgLine = input(true, 'Show Average Line', group = 'Pattern Style')

//Liquidity Style
showLiq = input(true, 'Show Liquidity Levels', group = 'Liquidity')
bullLiqCss = input.color(color.teal, 'Upper Liquidity', group = 'Liquidity')
bearLiqCss = input.color(color.red, 'Lower Liquidity', group = 'Liquidity')

//OB Projection Settings
showOBProj = input(true, 'Show OB Projections', group = 'OB Projections')
obProjStyle = input.string('Dashed', 'Projection Line Style', options = ['Solid', 'Dashed', 'Dotted'], group = 'OB Projections')
showOBLabels = input(true, 'Show Projection Labels', group = 'OB Projections')
obProjColor = input.color(color.new(color.white, 20), 'OB Projection Color', group = 'OB Projections')
expansionConfirmBars = input.int(1, 'Expansion Confirmation Bars', minval = 1, maxval = 10, group = 'OB Projections', tooltip = 'Number of bars to wait before confirming expansion (1 = immediate)')

//-----------------------------------------------------------------------------}
//UDT
//-----------------------------------------------------------------------------{
type mp
    box area
    line avg
    bool breakup
    bool breakdn
    float breakout_price
    float expansion_extreme
    float expansion_range
    line ob_projection
    line projection_ray
    label ob_label
    bool projection_confirmed
    bool projection_reached
    int projection_start_bar

//-----------------------------------------------------------------------------}
//Detect contraction
//-----------------------------------------------------------------------------{
var phy = 0., var phx = 0, var pht = 0.
var ply = 0., var plx = 0, var plt = 0.

var float top = na
var float btm = na

var float breakout_ref = na
var float expansion_tracking = na
var bool expansion_confirmed = false
var int expansion_start_bar = na

n = bar_index
ph = ta.pivothigh(length, length)
pl = ta.pivotlow(length, length)

if not na(ph)
    pht := math.sign(ph - phy)
    phy := ph

    if pht == -1 and plt == 1
        top := ph
        btm := ply
        phx := n-length

if not na(pl)
    plt := math.sign(pl - ply)
    ply := pl

    if pht  == -1 and plt == 1
        top := phy
        btm := pl
        plx := n-length

//-----------------------------------------------------------------------------}
//Set pattern
//-----------------------------------------------------------------------------{
var mp master = mp.new()

//Detect master pattern
isbull = high[length] > top and top > btm
isbear = low[length] < btm and top > btm

if isbull or isbear
    master.avg.set_x2(n-length)

    val = math.avg(top, btm)

    // Initialize OB projection tracking for new pattern
    breakout_ref := isbull ? top : btm
    expansion_tracking := isbull ? high : low
    expansion_confirmed := false
    expansion_start_bar := n

    //Create new master pattern object
    master := mp.new(
      showBox ? box.new(math.max(phx, plx), top, n-length, btm, na, bgcolor = showMinor ? color.new(patternCss, 80) : na) : na
      , showAvgLine ? line.new(n-length, val, n, val, color = showMinor ? patternCss : na) : na
      , isbull
      , isbear
      , breakout_ref
      , na
      , na
      , na
      , na
      , na
      , false
      , false
      , na)

    top := na
    btm := na

//Determine if pattern switch to major
if master.breakup
    if low < master.area.get_bottom()
        // Reset projection tracking for new expansion leg
        if not na(master.breakout_price)
            breakout_ref := master.area.get_bottom()
            expansion_tracking := high
            expansion_confirmed := false
            expansion_start_bar := n
            master.projection_confirmed := false
        
        if not showMajor
            master.area.delete()
            master.avg.delete()
        else
            master.area.set_border_color(patternCss)
            if not showMinor
                master.area.set_bgcolor(color.new(patternCss, 80))
                master.avg.set_color(patternCss)
else if master.breakdn
    if high > master.area.get_top()
        // Reset projection tracking for new expansion leg
        if not na(master.breakout_price)
            breakout_ref := master.area.get_top()
            expansion_tracking := low
            expansion_confirmed := false
            expansion_start_bar := n
            master.projection_confirmed := false
        
        if not showMajor
            master.area.delete()
            master.avg.delete()
        else
            master.area.set_border_color(patternCss)
            if not showMinor
                master.area.set_bgcolor(color.new(patternCss, 80))
                master.avg.set_color(patternCss)

//Set friction level x2 coordinate to current bar
if not na(master.avg)
    master.avg.set_x2(n)

//-----------------------------------------------------------------------------}
//OB Projection Tracking
//-----------------------------------------------------------------------------{

// Track expansion extreme during active breakout
if not na(master.breakout_price) and not master.projection_confirmed
    if master.breakup
        // For bullish: track highest high
        expansion_tracking := math.max(expansion_tracking, high)
        
        // Confirm expansion after N bars OR if significant movement
        bars_elapsed = n - expansion_start_bar
        range_moved = expansion_tracking - master.breakout_price
        if bars_elapsed >= expansionConfirmBars or range_moved > 0
            expansion_confirmed := true
            
    else if master.breakdn
        // For bearish: track lowest low
        expansion_tracking := math.min(expansion_tracking, low)
        
        // Confirm expansion after N bars OR if significant movement
        bars_elapsed = n - expansion_start_bar
        range_moved = master.breakout_price - expansion_tracking
        if bars_elapsed >= expansionConfirmBars or range_moved > 0
            expansion_confirmed := true

// Cancel projection if price reverses back into contraction
if not master.projection_confirmed
    if master.breakup and low < master.breakout_price
        expansion_confirmed := false
        breakout_ref := na
        expansion_tracking := na
        
    else if master.breakdn and high > master.breakout_price
        expansion_confirmed := false
        breakout_ref := na
        expansion_tracking := na

// Calculate OB projection once expansion is confirmed
if expansion_confirmed and not master.projection_confirmed and showOBProj
    
    // Store expansion extreme and projection start bar
    master.expansion_extreme := expansion_tracking
    master.projection_start_bar := n
    
    // Calculate expansion range height
    master.expansion_range := master.breakup ? (master.expansion_extreme - master.breakout_price) : (master.breakout_price - master.expansion_extreme)
    
    // Calculate OB projection level
    ob_level = master.breakup ? master.expansion_extreme + master.expansion_range : master.expansion_extreme - master.expansion_range
    
    // Determine line style
    line_style = obProjStyle == 'Solid' ? line.style_solid : obProjStyle == 'Dashed' ? line.style_dashed : line.style_dotted
    
    // Calculate projection distance (bars forward based on expansion range)
    proj_bars = math.min(50, math.max(10, math.round(master.expansion_range / syminfo.mintick / 10)))
    
    // Draw projection ray (diagonal line from expansion extreme to OB level) - neutral color
    master.projection_ray := line.new(n, master.expansion_extreme, n + proj_bars, ob_level, color = obProjColor, style = line_style, width = 2)
    
    // Draw horizontal projection line at OB level - neutral color
    master.ob_projection := line.new(n + proj_bars, ob_level, n + proj_bars + 20, ob_level, color = obProjColor, style = line.style_dotted, width = 1)
    
    // Add neutral label (no directional bias per transcript)
    if showOBLabels
        label_text = "OB " + str.tostring(ob_level, format.mintick)
        
        master.ob_label := label.new(n + proj_bars, ob_level, text = label_text, style = label.style_label_left, color = obProjColor, textcolor = color.black, size = size.small)
    
    // Mark as confirmed (static from now on)
    master.projection_confirmed := true
    
    // Reset tracking variables
    expansion_confirmed := false
    breakout_ref := na
    expansion_tracking := na

// Track if projection is reached
if not na(master.ob_projection) and not master.projection_reached
    proj_level = master.ob_projection.get_y1()
    
    if master.breakup and high >= proj_level
        master.projection_reached := true
        master.projection_ray.set_style(line.style_solid)
        master.projection_ray.set_width(3)
        master.ob_projection.set_style(line.style_solid)
        master.ob_projection.set_width(2)
        
    else if master.breakdn and low <= proj_level
        master.projection_reached := true
        master.projection_ray.set_style(line.style_solid)
        master.projection_ray.set_width(3)
        master.ob_projection.set_style(line.style_solid)
        master.ob_projection.set_width(2)

//-----------------------------------------------------------------------------}
//Liquidity levels
//-----------------------------------------------------------------------------{
var line liqup = na, var liqup_reach = false
var line liqdn = na, var liqdn_reach = false

liqph = ta.pivothigh(liqLength, liqLength)
liqpl = ta.pivotlow(liqLength, liqLength)

//Set upper liquidity
if not na(liqph) and showLiq
    if not liqup_reach
        liqup.set_x2(n-liqLength)

    liqup := line.new(n-liqLength, liqph, n, liqph, color = bullLiqCss, style = line.style_dotted)
    liqup_reach := false
else if not liqup_reach and showLiq
    liqup.set_x2(n)

    if high > liqup.get_y1()
        liqup_reach := true

//Set lower liquidity
if not na(liqpl) and showLiq
    if not liqdn_reach
        liqdn.set_x2(n-liqLength)

    liqdn := line.new(n-liqLength, liqpl, n, liqpl, color = bearLiqCss, style = line.style_dotted)
    liqdn_reach := false
else if not liqdn_reach and showLiq
    liqdn.set_x2(n)

    if low < liqdn.get_y1()
        liqdn_reach := true

//-----------------------------------------------------------------------------}